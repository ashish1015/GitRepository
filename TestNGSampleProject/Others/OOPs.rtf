{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Light;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 HelveticaNeue-Bold;
}
{\colortbl;\red255\green255\blue255;\red31\green36\blue45;\red255\green255\blue255;\red31\green36\blue45;
\red0\green0\blue0;\red109\green109\blue109;}
{\*\expandedcolortbl;;\cssrgb\c16078\c18824\c23137;\cssrgb\c100000\c100000\c100000;\cssrgb\c16078\c18824\c23137;
\cssrgb\c0\c0\c0;\cssrgb\c50196\c50196\c50196;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid2\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\paperw11900\paperh16840\margl1440\margr1440\vieww23960\viewh10140\viewkind0
\deftab720
\pard\pardeftab720\sl920\partightenfactor0

\f0\fs68 \cf2 \cb3 \expnd0\expndtw0\kerning0
OOPS Interview questions\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl520\sa210\partightenfactor0
\ls1\ilvl0
\fs44 \cf2 \kerning1\expnd0\expndtw0 {\listtext	1.	}\expnd0\expndtw0\kerning0
What are the core concepts of OOPS?\cb1 \uc0\u8232 
\f1\fs32 \cb3 OOPS core concepts are;\cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl340\sa200\partightenfactor0
\ls1\ilvl1
\fs26 \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	1.	}\expnd0\expndtw0\kerning0
Abstraction\cb1 \
\ls1\ilvl1\cb3 \kerning1\expnd0\expndtw0 {\listtext	2.	}\expnd0\expndtw0\kerning0
Encapsulation\cb1 \
\ls1\ilvl1\cb3 \kerning1\expnd0\expndtw0 {\listtext	3.	}\expnd0\expndtw0\kerning0
Polymorphism\cb1 \
\ls1\ilvl1\cb3 \kerning1\expnd0\expndtw0 {\listtext	4.	}\expnd0\expndtw0\kerning0
Inheritance\cb1 \
\ls1\ilvl1\cb3 \kerning1\expnd0\expndtw0 {\listtext	5.	}\expnd0\expndtw0\kerning0
Composition\cb1 \
\ls1\ilvl1\cb3 \kerning1\expnd0\expndtw0 {\listtext	6.	}\expnd0\expndtw0\kerning0
Association\cb1 \
\ls1\ilvl1\cb3 \kerning1\expnd0\expndtw0 {\listtext	7.	}\expnd0\expndtw0\kerning0
Aggregation\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl520\sa210\partightenfactor0
\ls1\ilvl0
\f0\fs44 \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	2.	}\expnd0\expndtw0\kerning0
What is Abstraction?\cb1 \uc0\u8232 
\f1\fs32 \cb3 Abstraction is an OOPS concept to construct the structure of the real world objects. During this construction only the general states and behaviors are taken and more specific states and behaviors are left aside for the implementers.\cb1 \uc0\u8232 
\fs26 \
\ls1\ilvl0
\f0\fs44 \cb3 \kerning1\expnd0\expndtw0 {\listtext	3.	}\expnd0\expndtw0\kerning0
What is Encapsulation?\cb1 \uc0\u8232 
\f1\fs32 \cb3 Encapsulation is an OOPS concept to create and define the permissions and restrictions of an object and its member variables and methods. A very simple example to explain the concept is to make the member variables of a class private and providing public getter and setter methods. Java provides four types of access level modifiers: public, protected, no modifier and private.\cb1 \uc0\u8232 
\fs26 \
\ls1\ilvl0
\f0\fs44 \cb3 \kerning1\expnd0\expndtw0 {\listtext	4.	}\expnd0\expndtw0\kerning0
What is the difference between Abstraction and Encapsulation?\cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl340\sa200\partightenfactor0
\ls1\ilvl1
\f1\fs26 \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\'93Program to interfaces, not implementations\'94 is the principle for Abstraction and \'93Encapsulate what varies\'94 is the OO principle for Encapsulation.\cb1 \
\ls1\ilvl1\cb3 \kerning1\expnd0\expndtw0 {\listtext	2.	}\expnd0\expndtw0\kerning0
Abstraction provides a general structure of a class and leaves the details for the implementers. Encapsulation is to create and define the permissions and restrictions of an object and its member variables and methods.\cb1 \
\ls1\ilvl1\cb3 \kerning1\expnd0\expndtw0 {\listtext	3.	}\expnd0\expndtw0\kerning0
Abstraction is implemented in Java using interface and abstract class while Encapsulation is implemented using four types of access level modifiers: public, protected, no modifier and private.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl520\sa210\partightenfactor0
\ls1\ilvl0
\f0\fs44 \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	5.	}\expnd0\expndtw0\kerning0
What is Polymorphism?\cb1 \uc0\u8232 
\f1\fs32 \cb3 Polymorphism is the occurrence of something in various forms. Java supports various forms of polymorphism like polymorphic reference variables, polymorphic method, polymorphic return types and polymorphic argument types.\cb1 \uc0\u8232 
\fs26 \
\ls1\ilvl0
\f0\fs44 \cb3 \kerning1\expnd0\expndtw0 {\listtext	6.	}\expnd0\expndtw0\kerning0
What is Inheritance?\cb1 \uc0\u8232 
\f1\fs32 \cb3 A subclass can inherit the states and behaviors of it\'92s super class is known as inheritance.\cb1 \uc0\u8232 
\fs26 \
\ls1\ilvl0
\f0\fs44 \cb3 \kerning1\expnd0\expndtw0 {\listtext	7.	}\expnd0\expndtw0\kerning0
What is multiple inheritance?\cb1 \uc0\u8232 
\f1\fs32 \cb3 A child class inheriting states and behaviors from multiple parent classes is known as multiple inheritance.\cb1 \uc0\u8232 
\fs26 \
\ls1\ilvl0
\f0\fs44 \cb3 \kerning1\expnd0\expndtw0 {\listtext	8.	}\expnd0\expndtw0\kerning0
What is the diamond problem in inheritance?\cb1 \uc0\u8232 
\f1\fs32 \cb3 In case of multiple inheritance, suppose class A has two subclasses B and C, and a class D has two super classes B and C.If a method present in A is overridden by both B and C but not by D then from which class D will inherit that method B or C? This problem is known as diamond problem.\cb1 \uc0\u8232 
\fs26 \
\ls1\ilvl0
\f0\fs44 \cb3 \kerning1\expnd0\expndtw0 {\listtext	9.	}\expnd0\expndtw0\kerning0
Why Java does not support multiple inheritance?\cb1 \uc0\u8232 
\f1\fs32 \cb3 Java was designed to be a simple language and multiple inheritance introduces complexities like diamond problem. Inheriting states or behaviors from two different type of classes is a case which in reality very rare and it can be achieved easily through an object association.\cb1 \uc0\u8232 
\fs26 \
\ls1\ilvl0
\f0\fs44 \cb3 \kerning1\expnd0\expndtw0 {\listtext	10.	}\expnd0\expndtw0\kerning0
What is Static Binding and Dynamic Binding?\cb1 \uc0\u8232 
\f1\fs32 \cb3 Static or early binding is resolved at compile time. Method overloading is an example of static binding.\cb1 \uc0\u8232 \cb3 Dynamic or late or virtual binding is resolved at run time. Method overriding is an example of dynamic binding.\cb1 \uc0\u8232 
\fs26 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl520\sa210\partightenfactor0
\ls2\ilvl0
\f0\fs44 \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	1.	}\expnd0\expndtw0\kerning0
What is a Class?\cb1 \uc0\u8232 
\f1\fs32 \cb3 A class is the specification or template of an object.\cb1 \uc0\u8232 
\fs26 \
\ls2\ilvl0
\f0\fs44 \cb3 \kerning1\expnd0\expndtw0 {\listtext	2.	}\expnd0\expndtw0\kerning0
What is an Object?\cb1 \uc0\u8232 
\f1\fs32 \cb3 Object is instance of class.\cb1 \uc0\u8232 
\fs26 \
\pard\tx566\pardeftab720\sl520\sa210\partightenfactor0
\cf2 ===========================================\
\
\pard\pardeftab720\sl920\partightenfactor0

\f0\fs72 \cf4 \cb3 \outl0\strokewidth0 \strokec4 Java interview questions\
\pard\pardeftab720\sl520\sa210\partightenfactor0

\fs48 \cf4 What is Runtime Polymorphism?\cb1 \
\pard\pardeftab720\sl440\sa400\partightenfactor0

\f1\fs36 \cf4 \cb3 Runtime polymorphism or dynamic method dispatch is a process in which a call to an overridden method is resolved at runtime rather than at compile-time.\cb1 \
\cb3 In this process, an overridden method is called through the reference variable of a super class. The\'a0\cb1 \
\pard\pardeftab720\sl520\sa210\partightenfactor0

\f0\fs48 \cf4 \cb3 \'a0What is the difference between abstraction and encapsulation?\cb1 \
\pard\pardeftab720\sl440\sa400\partightenfactor0

\f1\fs36 \cf4 \cb3 Abstraction hides the implementation details whereas encapsulation wraps code and data into a single unit.\cb1 \
\uc0\u8232 \
\pard\pardeftab720\sl520\sa210\partightenfactor0

\f0\fs48 \cf4 \cb3 \'a0What is abstract class?\cb1 \
\pard\pardeftab720\sl440\sa400\partightenfactor0

\f1\fs36 \cf4 \cb3 A class that is declared as abstract is known as abstract class. It needs to be extended and its method implemented. It cannot be instantiated.\cb1 \uc0\u8232 \
\pard\pardeftab720\sl520\sa210\partightenfactor0

\f0\fs48 \cf4 \cb3 \'a0Can there be any abstract method without abstract class?\cb1 \
\pard\pardeftab720\sl440\sa400\partightenfactor0

\f1\fs36 \cf4 \cb3 No, if there is any abstract method in a class, that class must be abstract.\cb1 \
\pard\pardeftab720\sl520\sa210\partightenfactor0

\f0\fs48 \cf4 \cb3 Can you use abstract and final both with a method?\cb1 \
\pard\pardeftab720\sl440\sa400\partightenfactor0

\f1\fs36 \cf4 \cb3 No, because abstract method needs to be overridden whereas you can't override final method.\cb1 \
\pard\pardeftab720\sl520\sa210\partightenfactor0

\f0\fs48 \cf4 \cb3 Is it possible to\'a0
\f2\b instantiate\'a0
\f0\b0 the abstract class?\cb1 \
\pard\pardeftab720\sl440\sa400\partightenfactor0

\f1\fs36 \cf4 \cb3 No, abstract class can never be instantiated.\cb1 \
\pard\pardeftab720\sl460\sa400\partightenfactor0

\f2\b \cf4 \cb3 What is interface?
\f1\b0 \cb1 \
\pard\pardeftab720\sl440\sa400\partightenfactor0
\cf4 \cb3 Interface is a blueprint of a class that have static constants and abstract methods.It can be used to achieve fully abstraction and multiple inheritance.\cb1 \
\uc0\u8232 \
\cb3 \'a0Can you declare an interface method static?\cb1 \uc0\u8232 \
\cb3 No, because methods of an interface is abstract by default, and static and abstract keywords can't be used together.\cb1 \
\pard\pardeftab720\sl520\sa210\partightenfactor0

\f0\fs48 \cf4 \cb3 \'a0Can an Interface be final?\cb1 \
\pard\pardeftab720\sl440\sa400\partightenfactor0

\f1\fs36 \cf4 \cb3 No, because its implementation is provided by another class.\cb1 \
\pard\pardeftab720\sl520\sa210\partightenfactor0

\f0\fs48 \cf4 \cb3 \'a0What is marker interface?\cb1 \
\pard\pardeftab720\sl440\sa400\partightenfactor0

\f1\fs36 \cf4 \cb3 An interface that have no data member and method is known as a marker interface.For example Serializable, Cloneable etc.\cb1 \
\pard\pardeftab720\sl520\sa210\partightenfactor0

\f0\fs48 \cf4 \cb3 \'a0What is difference between abstract class and interface?\cb1 \

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth6652\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4348\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl300\partightenfactor0

\f2\b\fs24 \cf5 \cb3 \strokec5 Abstract class\cb1 \cell 
\pard\intbl\itap1\pardeftab720\sl300\partightenfactor0
\cf5 \cb3 Interface\cb1 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth6652\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4348\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl280\partightenfactor0

\f1\b0 \cf5 \cb3 1)An abstract class can have method body (non-abstract methods).\cb1 \cell 
\pard\intbl\itap1\pardeftab720\sl280\partightenfactor0
\cf5 \cb3 Interface have only abstract methods.\cb1 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth6652\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4348\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl280\partightenfactor0
\cf5 \cb3 2)An abstract class can have instance variables.\cb1 \cell 
\pard\intbl\itap1\pardeftab720\sl280\partightenfactor0
\cf5 \cb3 An interface cannot have instance variables.\cb1 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth6652\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4348\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl280\partightenfactor0
\cf5 \cb3 3)An abstract class can have constructor.\cb1 \cell 
\pard\intbl\itap1\pardeftab720\sl280\partightenfactor0
\cf5 \cb3 Interface cannot have constructor.\cb1 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth6652\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4348\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl280\partightenfactor0
\cf5 \cb3 4)An abstract class can have static methods.\cb1 \cell 
\pard\intbl\itap1\pardeftab720\sl280\partightenfactor0
\cf5 \cb3 Interface cannot have static methods.\cb1 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth6652\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4348\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl280\partightenfactor0
\cf5 \cb3 5)You can extends one abstract class.\cb1 \cell 
\pard\intbl\itap1\pardeftab720\sl280\partightenfactor0
\cf5 \cb3 You can implement multiple interfaces.\cb1 \cell \lastrow\row
\pard\pardeftab720\sl520\sa210\partightenfactor0

\f0\fs48 \cf4 \cb3 \strokec4 \'a0Can we define private and protected modifiers for variables in interfaces?\cb1 \
\pard\pardeftab720\sl440\sa400\partightenfactor0

\f1\fs36 \cf4 \cb3 No, they are implicitly public.\cb1 \
\pard\pardeftab720\sl520\sa210\partightenfactor0

\f0\fs48 \cf4 \cb3 \'a0When can an object reference be cast to an interface reference?\cb1 \
\pard\pardeftab720\sl440\sa400\partightenfactor0

\f1\fs36 \cf4 \cb3 An object reference can be cast to an interface reference when the object implements the referenced interface.\cb1 \
\pard\tx566\pardeftab720\sl520\sa210\partightenfactor0

\fs26 \cf2 \outl0\strokewidth0 \
}